{"version":3,"file":"rise-slider-renderer.min.js","sources":["../../src/js/components/Arrows/path.ts","../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/arrows.ts","../../src/js/constants/project.ts","../../src/js/constants/classes.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/function/apply/apply.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/forEach/forEach.ts","../../src/js/utils/array/push/push.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/child/child.ts","../../src/js/utils/dom/children/children.ts","../../src/js/utils/object/ownKeys/ownKeys.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/object/merge/merge.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/math/math/math.ts","../../src/js/utils/string/camelToKebab/camelToKebab.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/constructors/EventBinder/EventBinder.ts","../../src/js/utils/array/empty/empty.ts","../../src/js/constructors/EventInterface/EventInterface.ts","../../src/js/constants/events.ts","../../src/js/renderer/constants/classes.ts","../../src/js/renderer/constants/defaults.ts","../../src/js/renderer/Style/Style.ts","../../src/js/renderer/SplideRenderer/SplideRenderer.ts","../../src/js/utils/string/pad/pad.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/constants/types.ts"],"sourcesContent":["/**\n * The namespace for SVG elements.\n */\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\n\n/**\n * The arrow path.\n */\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\n\n/**\n * SVG width and height.\n */\nexport const SIZE = 40;\n","/**\n * Enumerates slides from left to right.\n */\nexport const LTR = 'ltr';\n\n/**\n * Enumerates slides from right to left.\n */\nexport const RTL = 'rtl';\n\n/**\n * Enumerates slides in a col.\n */\nexport const TTB = 'ttb';\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../constants/arrows';\nimport { RTL, TTB } from '../../constants/directions';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\n\n\n/**\n * The interface for the Direction component.\n *\n * @since 3.0.0\n */\nexport interface DirectionComponent extends BaseComponent {\n  resolve( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): string;\n  orient( value: number ): number;\n}\n\n/**\n * The translation map for directions.\n *\n * @since 3.0.0\n */\nexport const ORIENTATION_MAP = {\n  width     : [ 'height' ],\n  left      : [ 'top', 'right' ],\n  right     : [ 'bottom', 'left' ],\n  x         : [ 'y' ],\n  X         : [ 'Y' ],\n  Y         : [ 'X' ],\n  ArrowLeft : [ ARROW_UP, ARROW_RIGHT ],\n  ArrowRight: [ ARROW_DOWN, ARROW_LEFT ],\n};\n\n/**\n * The component that absorbs the difference among directions.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Direction component object.\n */\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\n  /**\n   * Resolves the provided property name.\n   *\n   * @param prop      - A property name to translate.\n   * @param axisOnly  - Optional. If `ture`, returns the same property for LTR and RTL.\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\n   */\n  function resolve( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): string {\n    direction = direction || options.direction;\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\n\n    return ORIENTATION_MAP[ prop ] && ORIENTATION_MAP[ prop ][ index ]\n      || prop.replace( /width|left|right/i, ( match, offset ) => {\n        const replacement = ORIENTATION_MAP[ match.toLowerCase() ][ index ] || match;\n        return offset > 0 ? replacement.charAt( 0 ).toUpperCase() + replacement.slice( 1 ) : replacement;\n      } );\n  }\n\n  /**\n   * Orients the value towards the current direction.\n   *\n   * @param value - A value to orient.\n   *\n   * @return The oriented value.\n   */\n  function orient( value: number ): number {\n    return value * ( options.direction === RTL ? 1 : -1 );\n  }\n\n  return {\n    resolve,\n    orient,\n  };\n}\n","const ARROW = 'Arrow';\nexport const ARROW_LEFT  = `${ ARROW }Left`;\nexport const ARROW_RIGHT = `${ ARROW }Right`;\nexport const ARROW_UP    = `${ ARROW }Up`;\nexport const ARROW_DOWN  = `${ ARROW }Down`;","/**\n * The project code.\n *\n * @since 3.0.0\n */\nexport const PROJECT_CODE = 'rise-slider';\n\n/**\n * The data attribute prefix.\n *\n * @since 3.0.0\n */\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\n","import { PROJECT_CODE } from './project';\n\n/**\n * The prefix for classes.\n *\n * @since 4.1.0\n */\nconst CLASS_PREFIX = `${ PROJECT_CODE }__`;\n\n/**\n * The prefix for status classes.\n *\n * @since 4.1.0\n */\nconst STATUS_CLASS_PREFIX = 'is-';\n\n/**\n * All classes as constants.\n */\nexport const CLASS_ROOT            = PROJECT_CODE;\nexport const CLASS_TRACK           = `${ CLASS_PREFIX }track`;\nexport const CLASS_LIST            = `${ CLASS_PREFIX }list`;\nexport const CLASS_SLIDE           = `${ CLASS_PREFIX }slide`;\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\nexport const CLASS_ARROWS          = `${ CLASS_PREFIX }arrows`;\nexport const CLASS_ARROW           = `${ CLASS_PREFIX }arrow`;\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\nexport const CLASS_PAGINATION      = `${ CLASS_PREFIX }pagination`;\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\nexport const CLASS_PROGRESS        = `${ CLASS_PREFIX }progress`;\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\nexport const CLASS_TOGGLE          = `${ CLASS_PREFIX }toggle`;\nexport const CLASS_TOGGLE_PLAY     = `${ CLASS_TOGGLE }__play`;\nexport const CLASS_TOGGLE_PAUSE    = `${ CLASS_TOGGLE }__pause`;\nexport const CLASS_SPINNER         = `${ CLASS_PREFIX }spinner`;\nexport const CLASS_SR              = `${ CLASS_PREFIX }sr`;\nexport const CLASS_INITIALIZED     = `${ STATUS_CLASS_PREFIX }initialized`;\nexport const CLASS_ACTIVE          = `${ STATUS_CLASS_PREFIX }active`;\nexport const CLASS_PREV            = `${ STATUS_CLASS_PREFIX }prev`;\nexport const CLASS_NEXT            = `${ STATUS_CLASS_PREFIX }next`;\nexport const CLASS_VISIBLE         = `${ STATUS_CLASS_PREFIX }visible`;\nexport const CLASS_LOADING         = `${ STATUS_CLASS_PREFIX }loading`;\nexport const CLASS_FOCUS_IN        = `${ STATUS_CLASS_PREFIX }focus-in`;\nexport const CLASS_OVERFLOW        = `${ STATUS_CLASS_PREFIX }overflow`;\n\n/**\n * The array with all status classes except for `is-initialized`.\n *\n * @since 3.0.0\n */\nexport const STATUS_CLASSES = [\n  CLASS_ACTIVE,\n  CLASS_VISIBLE,\n  CLASS_PREV,\n  CLASS_NEXT,\n  CLASS_LOADING,\n  CLASS_FOCUS_IN,\n  CLASS_OVERFLOW,\n];\n\n/**\n * The collection of classes for elements that Splide dynamically creates.\n *\n * @since 3.0.0\n */\nexport const CLASSES = {\n  slide     : CLASS_SLIDE,\n  clone     : CLASS_CLONE,\n  arrows    : CLASS_ARROWS,\n  arrow     : CLASS_ARROW,\n  prev      : CLASS_ARROW_PREV,\n  next      : CLASS_ARROW_NEXT,\n  pagination: CLASS_PAGINATION,\n  page      : CLASS_PAGINATION_PAGE,\n  spinner   : CLASS_SPINNER,\n};\n","import { Options } from '../types';\nimport { CLASSES } from './classes';\nimport { I18N } from './i18n';\n\n\n/**\n * The collection of default options.\n * Note that this collection does not contain all options.\n *\n * @since 3.0.0\n */\nexport const DEFAULTS: Options = {\n  type              : 'slide',\n  role              : 'region',\n  speed             : 400,\n  perPage           : 1,\n  cloneStatus       : true,\n  arrows            : true,\n  pagination        : true,\n  paginationKeyboard: true,\n  interval          : 5000,\n  pauseOnHover      : true,\n  pauseOnFocus      : true,\n  resetProgress     : true,\n  easing            : 'cubic-bezier(0.25, 1, 0.5, 1)',\n  drag              : true,\n  direction         : 'ltr',\n  trimSpace         : true,\n  focusableNodes    : 'a, button, textarea, input, select, iframe',\n  live              : true,\n  classes           : CLASSES,\n  i18n              : I18N,\n  reducedMotion: {\n    speed      : 0,\n    rewindSpeed: 0,\n    autoplay   : 'pause',\n  },\n};","/**\n * The collection of i18n strings.\n *\n * @since 3.0.0\n */\nexport const I18N = {\n  prev      : 'Previous slide',\n  next      : 'Next slide',\n  first     : 'Go to first slide',\n  last      : 'Go to last slide',\n  slideX    : 'Go to slide %s',\n  pageX     : 'Go to page %s',\n  play      : 'Start autoplay',\n  pause     : 'Pause autoplay',\n  carousel  : 'carousel',\n  slide     : 'slide',\n  select    : 'Select a slide to show',\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\n};\n","/**\n * The slice method for an array-like object.\n *\n * @param arrayLike - An array-like object.\n * @param start     - Optional. A start index.\n * @param end       - Optional. A end index.\n *\n * @return An array with sliced elements.\n */\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\n  return Array.prototype.slice.call( arrayLike, start, end );\n}\n","import { AnyFunction, ShiftN } from '../../../types';\nimport { slice } from '../../arrayLike';\n\n\n/**\n * Create a function where provided arguments are bound.\n * `this` parameter will be always null.\n *\n * @param func - A function.\n * @param args - Arguments to bind to the function.\n *\n * @return A function where arguments are bound.\n */\nexport function apply<F extends AnyFunction, A extends any[] = any[]>(\n  func: F,\n  ...args: A\n): ( ...args: ShiftN<Parameters<F>, A[\"length\"]> ) => ReturnType<F>;\n\n/**\n * Create a function where provided arguments are bound.\n * `this` parameter will be always null.\n *\n * @param func - A function.\n */\nexport function apply( func: AnyFunction ): any {\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\n  return func.bind( null, ...slice( arguments, 1 ) );\n}\n","import { AnyFunction } from '../../types';\nimport { apply } from '../function';\n\n\n/**\n * The alias of the type check function.\n *\n * @param type    - A type.\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is the specified type.\n */\nfunction typeOf( type: string, subject: unknown ): boolean {\n  return typeof subject === type;\n}\n\n/**\n * Checks if the given subject is an object or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an object, or otherwise `false`.\n */\nexport function isObject( subject: unknown ): subject is object {\n  return ! isNull( subject ) && typeOf( 'object', subject );\n}\n\n/**\n * Checks if the given subject is an array or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an array, or otherwise `false`.\n */\nexport const isArray: <T>( subject: unknown ) => subject is T[] = Array.isArray;\n\n/**\n * Checks if the given subject is a function or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a function, or otherwise `false`.\n */\nexport const isFunction = <( subject: unknown ) => subject is AnyFunction>apply( typeOf, 'function' );\n\n/**\n * Checks if the given subject is a string or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a string, or otherwise `false`.\n */\nexport const isString = <( subject: unknown ) => subject is string>apply( typeOf, 'string' );\n\n/**\n * Checks if the given subject is `undefined` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `undefined`, or otherwise `false`.\n */\nexport const isUndefined = <( subject: unknown ) => subject is undefined>apply( typeOf, 'undefined' );\n\n/**\n * Checks if the given subject is `null` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `null`, or otherwise `false`.\n */\nexport function isNull( subject: unknown ): subject is null {\n  return subject === null;\n}\n\n/**\n * Checks if the given subject is an HTMLElement instance or not.\n * This method takes into account which `window` the node belongs to.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\n */\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\n  try {\n    return subject instanceof ( ( subject as Node ).ownerDocument.defaultView || window ).HTMLElement;\n  } catch ( e ) {\n    return false;\n  }\n}","import { isArray } from '../../type/type';\n\n\n/**\n * Push the provided value to an array if the value is not an array.\n *\n * @param value - A value to push.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n */\nexport function toArray<T>( value: T | T[] ): T[] {\n  return isArray( value ) ? value : [ value ];\n}\n","import { toArray } from '../toArray/toArray';\n\n\n/**\n * The extended `Array#forEach` method that accepts a single value as an argument.\n *\n * @param values   - A value or values to iterate over.\n * @param iteratee - An iteratee function.\n */\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\n  toArray( values ).forEach( iteratee );\n}\n","import { toArray } from '../toArray/toArray';\n\n\n/**\n * Extended `Array#push()` that accepts an item or an array with items.\n *\n * @param array - An array to push items.\n * @param items - An item or items to push.\n *\n * @return A provided array itself.\n */\nexport function push<T>( array: T[], items: T | T[] ): T[] {\n  array.push( ...toArray( items ) );\n  return array;\n}\n","import { isHTMLElement } from '../../type/type';\n\n\n/**\n * Checks if the element can be selected by the provided selector or not.\n *\n * @param elm      - An element to check.\n * @param selector - A selector to test.\n *\n * @return `true` if the selector matches the element, or otherwise `false`.\n */\nexport function matches( elm: Element | EventTarget, selector: string ): boolean {\n  return isHTMLElement( elm ) && ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\n}\n","import { children } from '../children/children';\n\n\n/**\n * Returns a child element that matches the specified tag or class name.\n *\n * @param parent   - A parent element.\n * @param selector - A selector to filter children.\n *\n * @return A matched child element if available, or otherwise `undefined`.\n */\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\n}\n","import { slice } from '../../arrayLike';\nimport { matches } from '../matches/matches';\n\n\n/**\n * Finds children that has the specified tag or class name.\n *\n * @param parent   - A parent element.\n * @param selector - Optional. A selector to filter children.\n *\n * @return An array with filtered children.\n */\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E[] {\n  const children = parent ? slice( parent.children ) as E[] : [];\n  return selector ? children.filter( child => matches( child, selector ) ) : children;\n}\n","/**\n * An alias of `Object.keys()`\n */\nexport const ownKeys = Object.keys;","import { ownKeys } from '../ownKeys/ownKeys';\n\n\n/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes `value` and `key` as arguments.\n * @param right    - If `true`, the method iterates over the object from the end like `forEachRight()`.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>(\n  object: T,\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void,\n  right?: boolean\n): T {\n  if ( object ) {\n    ( right ? ownKeys( object ).reverse() : ownKeys( object ) ).forEach( key => {\n      key !== '__proto__' && iteratee( object[ key ], key );\n    } );\n  }\n\n  return object;\n}\n","import { Cast, Head, Push, Resolve, Shift } from '../../../types';\nimport { slice } from '../../arrayLike';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assigns U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\n/**\n * Recursively assigns U[] to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - A tuple contains objects.\n *\n * @return An assigned object type.\n */\nexport type Assigned<T extends object, U extends object[], N extends number, C extends any[] = []> = {\n  0: T,\n  1: Assigned<Assign<T, Head<U>>, Shift<U>, N, Push<C>>,\n}[ C['length'] extends N ? 0 : 1 ] extends infer A ? Cast<A, any> : never;\n\nexport function assign<T extends object>( object: T ): T;\n\nexport function assign<T extends object, U extends object[]>(\n  object: T,\n  ...sources: U\n): Resolve<Assigned<T, U, U['length']>>\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n *\n * @param object - An object to assign properties to.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object>( object: T ): any {\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\n  slice( arguments, 1 ).forEach( source => {\n    forOwn( source, ( value, key ) => {\n      object[ key ] = source[ key ];\n    } );\n  } );\n\n  return object;\n}\n","import { Cast, Head, Push, Resolve, Shift } from '../../../types';\nimport { slice } from '../../arrayLike';\nimport { isArray, isObject } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Merges U to T.\n *\n * @typeParam T - An object to merge U into.\n * @typeParam U - An object to merge properties from.\n *\n * @return A merged object type.\n */\nexport type Merge<T extends object, U extends object> = Omit<T, keyof U> & {\n  [ K in ( keyof T & keyof U ) ]: U[ K ] extends object\n    ? U[ K ] extends any[]\n      ? U[ K ]\n      : T[ K ] extends object\n        ? Merge<T[ K ], U[ K ]> extends infer A ? Resolve<Cast<A, object>> : never\n        : U[ K ]\n    : U[ K ];\n} & Omit<U, keyof T>;\n\n/**\n * Recursively merges U[] to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - A tuple contains objects.\n *\n * @return An assigned object type.\n */\nexport type Merged<T extends object, U extends object[], N extends number, C extends any[] = []> = {\n  0: T,\n  1: Merged<Merge<T, Head<U>>, Shift<U>, N, Push<C>>,\n}[ C['length'] extends N ? 0 : 1 ] extends infer A ? Cast<A, any> : never;\n\nexport function merge<T extends object>( object: T ): T;\n\nexport function merge<T extends object, U extends object[]>(\n  object: T,\n  ...sources: U\n): Resolve<Merged<T, U, U['length']>>\n\n/**\n * Recursively merges source properties to the object.\n * Be aware that this method does not merge arrays. They are just duplicated by `slice()`.\n *\n * @param object - An object to merge properties to.\n *\n * @return A new object with merged properties.\n */\nexport function merge<T extends object>( object: T ): any {\n  // eslint-disable-next-line prefer-rest-params\n  slice( arguments, 1 ).forEach( source => {\n    forOwn( source, ( value, key ) => {\n      if ( isArray( value ) ) {\n        object[ key ] = value.slice();\n      } else if ( isObject( value ) ) {\n        object[ key ] = merge( {}, isObject( object[ key ] ) ? object[ key ] : {}, value );\n      } else {\n        object[ key ] = value;\n      }\n    } );\n  } );\n\n  return object;\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Removes the provided node from its parent.\n *\n * @param nodes - A node or nodes to remove.\n */\nexport function remove( nodes: Node | Node[] ): void {\n  forEach( nodes, node => {\n    if ( node && node.parentNode ) {\n      node.parentNode.removeChild( node );\n    }\n  } );\n}\n","import { isString } from '../../type/type';\n\n\n/**\n * Appends `px` to the provided number.\n * If the value is already string, just returns it.\n *\n * @param value - A value to append `px` to.\n *\n * @return A string with the CSS unit.\n */\nexport function unit( value: number | string ): string {\n  return isString( value ) ? value : value ? `${ value }px` : '';\n}\n","import { PROJECT_CODE } from '../../../constants/project';\n\n\n/**\n * Throws an error if the provided condition is falsy.\n *\n * @param condition - If falsy, an error is thrown.\n * @param message   - Optional. A message to display.\n */\nexport function assert( condition: any, message?: string ): void {\n  if ( ! condition ) {\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\n  }\n}\n","export const { min, max, floor, ceil, abs } = Math;\n","/**\n * Converts the provided string in the camel case to the kebab case.\n *\n * @param string - A string to convert.\n */\nexport function camelToKebab( string: string ): string {\n  return string.replace( /([a-z0-9])([A-Z])/g, '$1-$2' ).toLowerCase();\n}\n","import { pad } from '../pad/pad';\n\n\n/**\n * Stores unique IDs.\n *\n * @since 3.0.0\n */\nconst ids: Record<string, number> = {};\n\n/**\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\n *\n * @param prefix - A prefix for the ID.\n */\nexport function uniqueId( prefix: string ): string {\n  return `${ prefix }${ pad( ( ids[ prefix ] = ( ids[ prefix ] || 0 ) + 1 ) ) }`;\n}\n","import { AnyFunction } from '../../types';\nimport { empty, forEach } from '../../utils';\n\n\n/**\n * The type for an EventTarget or an array with EventTarget objects.\n *\n * @since 4.0.0\n */\ntype EventTargets = EventTarget | EventTarget[];\n\n/**\n * The interface for the EventBinder object.\n *\n * @since 3.0.0\n */\nexport interface EventBinderObject {\n  bind( target: EventTargets, events: string | string[], callback: AnyFunction, options?: AddEventListenerOptions ): void\n  unbind( target: EventTarget | EventTarget[], events: string | string[], callback?: AnyFunction ): void;\n  dispatch<T>( target: EventTarget, event: string, detail?: T ): void;\n  destroy(): void;\n}\n\n/**\n * The constructor function to provide methods to subscribe native events.\n *\n * @since 4.0.0\n * @constructor\n *\n * @return An EventBinder object.\n */\nexport function EventBinder(): EventBinderObject {\n  /**\n   * Stores all handlers that listen to native events.\n   * `[ target, event, namespace, callback, remover ]`\n   */\n  let listeners: [ EventTarget, string, string | undefined, AnyFunction, () => void ][] = [];\n\n  /**\n   * Listens to native events.\n   * - `destroy()` can unsubscribe all events.\n   * - In IE, mediaQueryList does not inherit EventTarget,\n   *   and only supports deprecated `addListener` and `removeListener`.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event or events to listen to.\n   * @param callback - A callback function.\n   * @param options  - Optional. The options to pass to the `addEventListener` function.\n   */\n  function bind(\n    targets: EventTargets,\n    events: string | string[],\n    callback: AnyFunction,\n    options?: AddEventListenerOptions\n  ): void {\n    forEachEvent( targets, events, ( target, event, namespace ) => {\n      const isEventTarget = 'addEventListener' in target;\n      const remover = isEventTarget\n        ? target.removeEventListener.bind( target, event, callback, options )\n        // @ts-ignore\n        : target[ 'removeListener' ].bind( target, callback );\n        // @ts-ignore\n      isEventTarget ? target.addEventListener( event, callback, options ) : target[ 'addListener' ]( callback );\n      listeners.push( [ target, event, namespace, callback, remover ] );\n    } );\n  }\n\n  /**\n   * Removes the event handler.\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event name or names to remove.\n   * @param callback - Optional. Specify the callback to remove.\n   */\n  function unbind( targets: EventTargets, events: string | string[], callback?: AnyFunction ): void {\n    forEachEvent( targets, events, ( target, event, namespace ) => {\n      listeners = listeners.filter( listener => {\n        if ( listener[ 0 ] === target\n          && listener[ 1 ] === event\n          && listener[ 2 ] === namespace\n          && ( ! callback || listener[ 3 ] === callback )\n        ) {\n          listener[ 4 ]();\n          return false;\n        }\n\n        return true;\n      } );\n    } );\n  }\n\n  /**\n   * Dispatches a custom event of the target.\n   *\n   * @param target - An event target.\n   * @param type   - An event type.\n   * @param detail - Optional. The `detail` object of the event.\n   *\n   * @return An event object.\n   */\n  function dispatch<T>( target: EventTarget, type: string, detail?: T ): CustomEvent {\n    let e: CustomEvent;\n    const bubbles = true;\n\n    if ( typeof CustomEvent === 'function' ) {\n      e = new CustomEvent( type, { bubbles, detail } );\n    } else {\n      e = document.createEvent( 'CustomEvent' );\n      e.initCustomEvent( type, bubbles, false, detail );\n    }\n\n    target.dispatchEvent( e );\n    return e;\n  }\n\n  /**\n   * Iterates over each target and event.\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event name or names.\n   * @param iteratee - An iteratee function.\n   */\n  function forEachEvent(\n    targets: EventTargets,\n    events: string | string[],\n    iteratee: ( target: EventTarget, event: string, namespace: string | undefined ) => void\n  ): void {\n    forEach( targets, target => {\n      target && forEach( events, events => {\n        events.split( ' ' ).forEach( eventNS => {\n          const fragment = eventNS.split( '.' );\n          iteratee( target, fragment[ 0 ], fragment[ 1 ] );\n        } );\n      } );\n    } );\n  }\n\n  /**\n   * Removes all listeners.\n   */\n  function destroy(): void {\n    listeners.forEach( data => { data[ 4 ]() } );\n    empty( listeners );\n  }\n\n  return {\n    bind,\n    unbind,\n    dispatch,\n    destroy,\n  };\n}\n","/**\n * Empties the array.\n *\n * @param array - A array to empty.\n */\nexport function empty( array: any[] ): void {\n  array.length = 0;\n}\n","import { EVENT_DESTROY } from '../../constants/events';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction, EventMap } from '../../types';\nimport { apply, assign, isArray, slice, toArray } from '../../utils';\nimport { EventBinder, EventBinderObject } from '../EventBinder/EventBinder';\n\n\n/**\n * The interface for the EventInterface object.\n *\n * @since 3.0.0\n */\nexport interface EventInterfaceObject extends EventBinderObject {\n  on<K extends keyof EventMap>( event: K, callback: EventMap[ K ] ): void;\n  on( events: string | string[], callback: AnyFunction ): void;\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): void;\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): void\n  emit( event: string, ...args: any[] ): void;\n\n  /** @internal */\n  bus: DocumentFragment;\n}\n\n/**\n * The constructor function that provides interface for internal and native events.\n *\n * @since 3.0.0\n * @constructor\n *\n * @param Splide - A Splide instance.\n *\n * @return A collection of interface functions.\n */\nexport function EventInterface( Splide?: Splide ): EventInterfaceObject {\n  /**\n   * The document fragment for internal events.\n   * Provide the Splide instance to share the bus.\n   */\n  const bus = Splide ? Splide.event.bus : document.createDocumentFragment();\n\n  /**\n   * An event binder object.\n   */\n  const binder = EventBinder();\n\n  /**\n   * Listens to an internal event or events.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function to register.\n   */\n  function on( events: string | string[], callback: AnyFunction ): void {\n    binder.bind( bus, toArray( events ).join( ' ' ), e => {\n      callback.apply( callback, isArray( e.detail ) ? e.detail : [] );\n    } );\n  }\n\n  /**\n   * Triggers callback functions.\n   * This accepts additional arguments and passes them to callbacks.\n   *\n   * @param event - An event name.\n   */\n  function emit( event: string ): void {\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\n    binder.dispatch( bus, event, slice( arguments, 1 ) );\n  }\n\n  if ( Splide ) {\n    Splide.event.on( EVENT_DESTROY, binder.destroy );\n  }\n\n  return assign( binder, {\n    bus,\n    on,\n    off: apply( binder.unbind, bus ),\n    emit,\n  } );\n}","export const EVENT_MOUNTED            = 'mounted';\nexport const EVENT_READY              = 'ready';\nexport const EVENT_MOVE               = 'move';\nexport const EVENT_MOVED              = 'moved';\nexport const EVENT_CLICK              = 'click';\nexport const EVENT_ACTIVE             = 'active';\nexport const EVENT_INACTIVE           = 'inactive';\nexport const EVENT_VISIBLE            = 'visible';\nexport const EVENT_HIDDEN             = 'hidden';\nexport const EVENT_REFRESH            = 'refresh';\nexport const EVENT_UPDATED            = 'updated';\nexport const EVENT_RESIZE             = 'resize';\nexport const EVENT_RESIZED            = 'resized';\nexport const EVENT_DRAG               = 'drag';\nexport const EVENT_DRAGGING           = 'dragging';\nexport const EVENT_DRAGGED            = 'dragged';\nexport const EVENT_SCROLL             = 'scroll';\nexport const EVENT_SCROLLED           = 'scrolled';\nexport const EVENT_OVERFLOW           = 'overflow';\nexport const EVENT_DESTROY            = 'destroy';\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\n\n/** @internal */\nexport const EVENT_SLIDE_KEYDOWN     = 'sk';\nexport const EVENT_SHIFTED           = 'sh';\nexport const EVENT_END_INDEX_CHANGED = 'ei';\n","export const CLASS_RENDERED = 'is-rendered';\n","import { RendererConfig } from '../types/types';\n\n\n/**\n * Default options for generating static HTML.\n *\n * @since 3.0.0\n */\nexport const RENDERER_DEFAULT_CONFIG: RendererConfig = {\n  listTag : 'ul',\n  slideTag: 'li',\n};\n","import { Options } from '../../types';\nimport { forOwn } from '../../utils';\n\n\ninterface Styles {\n  [ breakpoint: string ]: {\n    [ selector: string ]: Record<string, string | number>\n  };\n}\n\n/**\n * The class for generating styles as a string.\n *\n * @since 3.0.0\n */\nexport class Style {\n  /**\n   * The collection of registered styles categorized by each breakpoint.\n   */\n  private readonly styles: Styles = {};\n\n  /**\n   * The ID of the slider.\n   */\n  private readonly id: string;\n\n  /**\n   * Holds options.\n   */\n  private readonly options: Options;\n\n  /**\n   * The Style constructor.\n   *\n   * @param id      - A slider ID.\n   * @param options - Options.\n   */\n  constructor( id: string, options: Options ) {\n    this.id      = id;\n    this.options = options;\n  }\n\n  /**\n   * Registers a CSS rule.\n   *\n   * @param selector - A selector.\n   * @param prop\n   * @param value\n   * @param breakpoint\n   */\n  rule( selector: string, prop: string, value: string | number, breakpoint?: string ): void {\n    breakpoint = breakpoint || 'default';\n    const selectors = ( this.styles[ breakpoint ] = this.styles[ breakpoint ] || {} );\n    const styles    = ( selectors[ selector ] = selectors[ selector ] || {} );\n    styles[ prop ] = value;\n  }\n\n  /**\n   * Builds styles as a single string.\n   *\n   * @return Built styles.\n   */\n  build(): string {\n    let css = '';\n\n    if ( this.styles.default ) {\n      css += this.buildSelectors( this.styles.default );\n    }\n\n    Object.keys( this.styles )\n      .sort( ( n, m ) => this.options.mediaQuery === 'min' ? +n - +m : +m - +n )\n      .forEach( breakpoint => {\n        if ( breakpoint !== 'default' ) {\n          css += `@media screen and (max-width: ${ breakpoint }px) {`;\n          css += this.buildSelectors( this.styles[ breakpoint ] );\n          css += `}`;\n        }\n      } );\n\n    return css;\n  }\n\n  /**\n   * Builds styles for each breakpoint.\n   *\n   * @param selectors - An object with styles.\n   *\n   * @return Built styles.\n   */\n  private buildSelectors( selectors: Record<string, Record<string, string | number>> ): string {\n    let css = '';\n\n    forOwn( selectors, ( styles, selector ) => {\n      selector = `#${ this.id } ${ selector }`.trim();\n      css += `${ selector } {`;\n\n      forOwn( styles, ( value, prop ) => {\n        if ( value || value === 0 ) {\n          css += `${ prop }: ${ value };`;\n        }\n      } );\n\n      css += '}';\n    } );\n\n    return css;\n  }\n}\n","import { PATH, SIZE, XML_NAME_SPACE } from '../../components/Arrows/path';\nimport { Direction, DirectionComponent } from '../../components/Direction/Direction';\nimport { CLASS_ACTIVE, CLASS_CLONE, CLASS_LIST, CLASS_ROOT, CLASS_SLIDE, CLASS_TRACK } from '../../constants/classes';\nimport { DEFAULTS } from '../../constants/defaults';\nimport { TTB } from '../../constants/directions';\nimport { EVENT_MOUNTED } from '../../constants/events';\nimport { LOOP, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { Options } from '../../types';\nimport {\n  assert,\n  assign,\n  camelToKebab,\n  child,\n  forOwn,\n  isObject,\n  isString,\n  max,\n  merge,\n  push,\n  queryAll,\n  remove,\n  uniqueId,\n  unit,\n} from '../../utils';\nimport { CLASS_RENDERED } from '../constants/classes';\nimport { RENDERER_DEFAULT_CONFIG } from '../constants/defaults';\nimport { Style } from '../Style/Style';\nimport { RendererConfig, SlideContent } from '../types/types';\n\n\n/**\n * The class to generate static HTML of the slider for the first view.\n *\n * @since 3.0.0\n */\nexport class SplideRenderer {\n  /**\n   * Removes a style element and clones.\n   *\n   * @param splide - A Splide instance.\n   */\n  static clean( splide: Splide ): void {\n    const { on } = EventInterface( splide );\n    const { root } = splide;\n    const clones = queryAll( root, `.${ CLASS_CLONE }` );\n\n    on( EVENT_MOUNTED, () => {\n      remove( child( root, 'style' ) );\n    } );\n\n    remove( clones );\n  }\n\n  /**\n   * Holds slide contents.\n   */\n  private readonly contents: string[] | SlideContent[];\n\n  /**\n   * Stores data of slides.\n   */\n  private readonly slides: SlideContent[] = [];\n\n  /**\n   * The Direction component.\n   */\n  private readonly Direction: DirectionComponent;\n\n  /**\n   * Holds the Style instance.\n   */\n  private readonly Style: Style;\n\n  /**\n   * Holds options.\n   */\n  private readonly options: Options = {};\n\n  /**\n   * Holds options for this instance.\n   */\n  private readonly config: RendererConfig;\n\n  /**\n   * The slider ID.\n   */\n  private readonly id: string;\n\n  /**\n   * An array with options for each breakpoint.\n   */\n  private readonly breakpoints: [ string, Options ][] = [];\n\n  /**\n   * The SplideRenderer constructor.\n   *\n   * @param contents - An array with slide contents. Each item must be an HTML or a plain text.\n   * @param options  - Optional. Slider options.\n   * @param config   - Static default options.\n   * @param defaults - Default options for the slider. Pass `Splide.defaults` if you are using it.\n   */\n  constructor( contents: string[] | SlideContent[], options?: Options, config?: RendererConfig, defaults?: Options ) {\n    merge( DEFAULTS, defaults || {} );\n    merge( merge( this.options, DEFAULTS ), options || {} );\n\n    this.contents  = contents;\n    this.config    = assign( {}, RENDERER_DEFAULT_CONFIG, config || {} );\n    this.id        = this.config.id || uniqueId( 'splide' );\n    this.Style     = new Style( this.id, this.options );\n    this.Direction = Direction( null, null, this.options );\n\n    assert( this.contents.length, 'Provide at least 1 content.' );\n\n    this.init();\n  }\n\n  /**\n   * Initializes the instance.\n   */\n  private init(): void {\n    this.parseBreakpoints();\n    this.initSlides();\n    this.registerRootStyles();\n    this.registerTrackStyles();\n    this.registerSlideStyles();\n    this.registerListStyles();\n  }\n\n  /**\n   * Initializes slides.\n   */\n  private initSlides(): void {\n    push( this.slides, this.contents.map( ( content, index ) => {\n      content = isString( content ) ? { html: content } : content;\n      content.styles = content.styles || {};\n      content.attrs  = content.attrs || {};\n\n      this.cover( content );\n\n      const classes = `${ this.options.classes.slide } ${ index === 0 ? CLASS_ACTIVE : '' }`;\n\n      assign( content.attrs, {\n        class: `${ classes } ${ content.attrs.class || '' }`.trim(),\n        style: this.buildStyles( content.styles ),\n      } );\n\n      return content;\n    } ) );\n\n    if ( this.isLoop() ) {\n      this.generateClones( this.slides );\n    }\n  }\n\n  /**\n   * Registers styles for the root element.\n   */\n  private registerRootStyles(): void {\n    this.breakpoints.forEach( ( [ width, options ] ) => {\n      this.Style.rule( ' ', 'max-width', unit( options.width ), width );\n    } );\n  }\n\n  /**\n   * Registers styles for the track element.\n   */\n  private registerTrackStyles(): void {\n    const { Style } = this;\n    const selector = `.${ CLASS_TRACK }`;\n\n    this.breakpoints.forEach( ( [ width, options ] ) => {\n      Style.rule( selector, this.resolve( 'paddingLeft' ), this.cssPadding( options, false ), width );\n      Style.rule( selector, this.resolve( 'paddingRight' ), this.cssPadding( options, true ), width );\n      Style.rule( selector, 'height', this.cssTrackHeight( options ), width );\n    } );\n  }\n\n  /**\n   * Registers styles for the list element.\n   */\n  private registerListStyles(): void {\n    const { Style } = this;\n    const selector = `.${ CLASS_LIST }`;\n\n    this.breakpoints.forEach( ( [ width, options ] ) => {\n      Style.rule( selector, 'transform', this.buildTranslate( options ), width );\n\n      if ( ! this.cssSlideHeight( options ) ) {\n        Style.rule( selector, 'aspect-ratio', this.cssAspectRatio( options ), width );\n      }\n    } );\n  }\n\n  /**\n   * Registers styles for slides and clones.\n   */\n  private registerSlideStyles(): void {\n    const { Style } = this;\n    const selector = `.${ CLASS_SLIDE }`;\n\n    this.breakpoints.forEach( ( [ width, options ] ) => {\n      Style.rule( selector, 'width', this.cssSlideWidth( options ), width );\n      Style.rule( selector, 'height', this.cssSlideHeight( options ) || '100%', width );\n      Style.rule( selector, this.resolve( 'marginRight' ), unit( options.gap ) || '0px', width );\n      Style.rule( `${ selector } > img`, 'display', options.cover ? 'none' : 'inline', width );\n    } );\n  }\n\n  /**\n   * Builds multiple `translateX` for the list element.\n   *\n   * @param options - Options for each breakpoint.\n   *\n   * @return A string with multiple translate functions.\n   */\n  private buildTranslate( options: Options ): string {\n    const { resolve, orient } = this.Direction;\n    const values = [];\n\n    values.push( this.cssOffsetClones( options ) );\n    values.push( this.cssOffsetGaps( options ) );\n\n    if ( this.isCenter( options ) ) {\n      values.push( this.buildCssValue( orient( -50 ), '%' ) );\n      values.push( ...this.cssOffsetCenter( options ) );\n    }\n\n    return values\n      .filter( Boolean )\n      .map( value => `translate${ resolve( 'X' ) }(${ value })` )\n      .join( ' ' );\n  }\n\n  /**\n   * Returns offset for the list element.\n   * This does not include gaps because it can not be converted into percent.\n   *\n   * @param options - Options for each breakpoint.\n   *\n   * @return The offset.\n   */\n  private cssOffsetClones( options: Options ): string {\n    const { resolve, orient } = this.Direction;\n    const cloneCount = this.getCloneCount();\n\n    if ( this.isFixedWidth( options ) ) {\n      const { value, unit } = this.parseCssValue( options[ resolve( 'fixedWidth' ) ] );\n      return this.buildCssValue( orient( value ) * cloneCount, unit );\n    }\n\n    const percent = 100 * cloneCount / options.perPage;\n    return `${ orient( percent ) }%`;\n  }\n\n  /**\n   * Returns offset for centering the active slide.\n   *\n   * Note:\n   * ( 100% + gap ) / perPage - gap\n   * 100% / perPage + gap / perPage - gap;\n   * 50% / perPage + ( gap / perPage - gap ) / 2;\n   *\n   * @param options - Options for each breakpoint.\n   *\n   * @return The offset.\n   */\n  private cssOffsetCenter( options: Options ): string[] {\n    const { resolve, orient } = this.Direction;\n\n    if ( this.isFixedWidth( options ) ) {\n      const { value, unit } = this.parseCssValue( options[ resolve( 'fixedWidth' ) ] );\n      return [ this.buildCssValue( orient( value / 2 ), unit ) ];\n    }\n\n    const values = [];\n    const { perPage, gap } = options;\n\n    values.push( `${ orient( 50 / perPage ) }%` );\n\n    if ( gap ) {\n      const { value, unit } = this.parseCssValue( gap );\n      const gapOffset = ( value / perPage - value ) / 2;\n      values.push( this.buildCssValue( orient( gapOffset ), unit ) );\n    }\n\n    return values;\n  }\n\n  /**\n   * Returns offset for gaps.\n   *\n   * @param options - Options for each breakpoint.\n   *\n   * @return The offset as `calc()`.\n   */\n  private cssOffsetGaps( options: Options ): string {\n    const cloneCount = this.getCloneCount();\n\n    if ( cloneCount && options.gap ) {\n      const { orient } = this.Direction;\n      const { value, unit } = this.parseCssValue( options.gap );\n\n      if ( this.isFixedWidth( options ) ) {\n        return this.buildCssValue( orient( value * cloneCount ), unit );\n      }\n\n      const { perPage } = options;\n      const gaps = cloneCount / perPage;\n      return this.buildCssValue( orient( gaps * value ), unit );\n    }\n\n    return '';\n  }\n\n  /**\n   * Resolves the prop for the current direction and converts it into the Kebab case.\n   *\n   * @param prop - A property name to resolve.\n   *\n   * @return A resolved property name in the Kebab case.\n   */\n  private resolve( prop: string ): string {\n    return camelToKebab( this.Direction.resolve( prop ) );\n  }\n\n  /**\n   * Returns padding in the CSS format.\n   *\n   * @param options - Options.\n   * @param right   - Determines whether to get padding right or left.\n   *\n   * @return Padding in the CSS format.\n   */\n  private cssPadding( options: Options, right: boolean ): string {\n    const { padding } = options;\n    const prop = this.Direction.resolve( right ? 'right' : 'left', true );\n    return padding && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) ) || '0px';\n  }\n\n  /**\n   * Returns height of the track element in the CSS format.\n   *\n   * @param options - Options.\n   *\n   * @return Height in the CSS format.\n   */\n  private cssTrackHeight( options: Options ): string {\n    let height = '';\n\n    if ( this.isVertical() ) {\n      height = this.cssHeight( options );\n      assert( height, '\"height\" is missing.' );\n      height = `calc(${ height } - ${ this.cssPadding( options, false ) } - ${ this.cssPadding( options, true ) })`;\n    }\n\n    return height;\n  }\n\n  /**\n   * Returns height provided though options in the CSS format.\n   *\n   * @param options - Options.\n   *\n   * @return Height in the CSS format.\n   */\n  private cssHeight( options: Options ): string {\n    return unit( options.height );\n  }\n\n  /**\n   * Returns width of each slide in the CSS format.\n   *\n   * @param options - Options.\n   *\n   * @return Width in the CSS format.\n   */\n  private cssSlideWidth( options: Options ): string {\n    return options.autoWidth\n      ? ''\n      : unit( options.fixedWidth ) || ( this.isVertical() ? '' : this.cssSlideSize( options ) );\n  }\n\n  /**\n   * Returns height of each slide in the CSS format.\n   *\n   * @param options - Options.\n   *\n   * @return Height in the CSS format.\n   */\n  private cssSlideHeight( options: Options ): string {\n    return unit( options.fixedHeight )\n      || ( this.isVertical()\n        ? ( options.autoHeight ? '' : this.cssSlideSize( options ) )\n        : this.cssHeight( options )\n      );\n  }\n\n  /**\n   * Returns width or height of each slide in the CSS format, considering the current direction.\n   *\n   * @param options - Options.\n   *\n   * @return Width or height in the CSS format.\n   */\n  private cssSlideSize( options: Options ): string {\n    const gap = unit( options.gap );\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\n  }\n\n  /**\n   * Returns the aspectRatio value to simulate the `heightRatio` option.\n   *\n   * @param options - Options.\n   *\n   * @return aspectRatio in the CSS format.\n   */\n  private cssAspectRatio( options: Options ): string {\n    const { heightRatio } = options;\n    return heightRatio ? `${ 1 / heightRatio }` : '';\n  }\n\n  /**\n   * Builds the css value by the provided value and unit.\n   *\n   * @param value - A value.\n   * @param unit  - A CSS unit.\n   *\n   * @return A built value for a CSS value.\n   */\n  private buildCssValue( value: number, unit: string ): string {\n    return `${ value }${ unit }`;\n  }\n\n  /**\n   * Parses the CSS value into number and unit.\n   *\n   * @param value - A value to parse.\n   *\n   * @return An object with value and unit.\n   */\n  private parseCssValue( value: string | number ): { value: number, unit: string } {\n    if ( isString( value ) ) {\n      const number = parseFloat( value ) || 0;\n      const unit   = value.replace( /\\d*(\\.\\d*)?/, '' ) || 'px';\n      return { value: number, unit };\n    }\n\n    return { value, unit: 'px' };\n  }\n\n  /**\n   * Parses breakpoints and generate options for each breakpoint.\n   */\n  private parseBreakpoints(): void {\n    const { breakpoints } = this.options;\n\n    this.breakpoints.push( [ 'default', this.options ] );\n\n    if ( breakpoints ) {\n      forOwn( breakpoints, ( options, width ) => {\n        this.breakpoints.push( [ width, merge( merge( {}, this.options ), options ) ] );\n      } );\n    }\n  }\n\n  /**\n   * Checks if the slide width is fixed or not.\n   *\n   * @return `true` if the slide width is fixed, or otherwise `false`.\n   */\n  private isFixedWidth( options: Options ): boolean {\n    return !! options[ this.Direction.resolve( 'fixedWidth' ) ];\n  }\n\n  /**\n   * Checks if the slider type is loop or not.\n   *\n   * @return `true` if the slider type is loop, or otherwise `false`.\n   */\n  private isLoop(): boolean {\n    return this.options.type === LOOP;\n  }\n\n  /**\n   * Checks if the active slide should be centered or not.\n   *\n   * @return `true` if the slide should be centered, or otherwise `false`.\n   */\n  private isCenter( options: Options ): boolean {\n    if( options.focus === 'center' ) {\n      if ( this.isLoop() ) {\n        return true;\n      }\n\n      if ( this.options.type === SLIDE ) {\n        return ! this.options.trimSpace;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Checks if the direction is TTB or not.\n   *\n   * @return `true` if the direction is TTB, or otherwise `false`.\n   */\n  private isVertical(): boolean {\n    return this.options.direction === TTB;\n  }\n\n  /**\n   * Builds classes of the root element.\n   *\n   * @return Classes for the root element as a single string.\n   */\n  private buildClasses(): string {\n    const { options } = this;\n\n    return [\n      CLASS_ROOT,\n      `${ CLASS_ROOT }--${ options.type }`,\n      `${ CLASS_ROOT }--${ options.direction }`,\n      options.drag && `${ CLASS_ROOT }--draggable`,\n      options.isNavigation && `${ CLASS_ROOT }--nav`,\n      CLASS_ACTIVE,\n      ! this.config.hidden && CLASS_RENDERED,\n    ].filter( Boolean ).join( ' ' );\n  }\n\n  /**\n   * Converts provided attributes into a single string.\n   *\n   * @param attrs - An object with attributes.\n   *\n   * @return A built string.\n   */\n  private buildAttrs( attrs: Record<string, string | number | boolean> ): string {\n    let attr = '';\n\n    forOwn( attrs, ( value, key ) => {\n      attr += value ? ` ${ camelToKebab( key ) }=\"${ value }\"` : '';\n    } );\n\n    return attr.trim();\n  }\n\n  /**\n   * Converts provided styles into a single string.\n   *\n   * @param styles - An object with styles.\n   *\n   * @return A built string.\n   */\n  private buildStyles( styles: Record<string, string | number> ): string {\n    let style = '';\n\n    forOwn( styles, ( value, key ) => {\n      style += ` ${ camelToKebab( key ) }:${ value };`;\n    } );\n\n    return style.trim();\n  }\n\n  /**\n   * Generates HTML of slides with inserting provided contents.\n   *\n   * @return The HTML for all slides and clones.\n   */\n  private renderSlides(): string {\n    const { slideTag: tag } = this.config;\n\n    return this.slides.map( content => {\n      return `<${ tag } ${ this.buildAttrs( content.attrs ) }>${ content.html || '' }</${ tag }>`;\n    } ).join( '' );\n  }\n\n  /**\n   * Add the `background` style for the cover mode.\n   *\n   * @param content - A slide content.\n   */\n  private cover( content: SlideContent ): void {\n    const { styles, html = '' } = content;\n\n    if ( this.options.cover && ! this.options.lazyLoad ) {\n      const src = html.match( /<img.*?src\\s*=\\s*(['\"])(.+?)\\1.*?>/ );\n\n      if ( src && src[ 2 ] ) {\n        styles.background = `center/cover no-repeat url('${ src[ 2 ] }')`;\n      }\n    }\n  }\n\n  /**\n   * Generates clones.\n   *\n   * @param contents - An array with SlideContent objects.\n   */\n  private generateClones( contents: SlideContent[] ): void {\n    const { classes } = this.options;\n    const count  = this.getCloneCount();\n    const slides = contents.slice();\n\n    while ( slides.length < count ) {\n      push( slides, slides );\n    }\n\n    push( slides.slice( -count ).reverse(), slides.slice( 0, count ) ).forEach( ( content, index ) => {\n      const attrs = assign( {}, content.attrs, { class: `${ content.attrs.class } ${ classes.clone }` } );\n      const clone = assign( {}, content, { attrs } );\n      index < count ? contents.unshift( clone ) : contents.push( clone );\n    } );\n  }\n\n  /**\n   * Returns the number of clones to generate.\n   *\n   * @return A number of clones.\n   */\n  private getCloneCount(): number {\n    if ( this.isLoop() ) {\n      const { options } = this;\n\n      if ( options.clones ) {\n        return options.clones;\n      }\n\n      const perPage = max( ...this.breakpoints.map( ( [ , options ] ) => options.perPage ) );\n      return perPage * ( ( options.flickMaxPages || 1 ) + 1 );\n    }\n\n    return 0;\n  }\n\n  /**\n   * Generates arrows and the wrapper element.\n   *\n   * @return The HTML for arrows.\n   */\n  private renderArrows(): string {\n    let html = '';\n\n    html += `<div class=\"${ this.options.classes.arrows }\">`;\n    html += this.renderArrow( true );\n    html += this.renderArrow( false );\n    html += `</div>`;\n\n    return html;\n  }\n\n  /**\n   * Generates an arrow HTML.\n   * Some attributes are temporary, and Splide changes them after mount.\n   *\n   * @param prev - Options for each breakpoint.\n   *\n   * @return The HTML for the prev or next arrow.\n   */\n  private renderArrow( prev: boolean ): string {\n    const { classes, i18n } = this.options;\n    const attrs = {\n      class    : `${ classes.arrow } ${ prev ? classes.prev : classes.next }`,\n      type     : 'button',\n      ariaLabel: prev ? i18n.prev : i18n.next,\n    };\n\n    return `<button ${ this.buildAttrs( attrs ) }>`\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\n      + `<path d=\"${ this.options.arrowPath || PATH }\" />`\n      + `</svg>`\n      + `</button>`;\n  }\n\n  /**\n   * Returns the HTML of the slider.\n   *\n   * @return The generated HTML.\n   */\n  html(): string {\n    const { rootClass, listTag, arrows, beforeTrack, afterTrack, slider, beforeSlider, afterSlider } = this.config;\n\n    let html = '';\n\n    html += `<div id=\"${ this.id }\" class=\"${ this.buildClasses() } ${ rootClass || '' }\">`;\n    html += `<style>${ this.Style.build() }</style>`;\n\n    if ( slider ) {\n      html += beforeSlider || '';\n      html += `<div class=\"splide__slider\">`;\n    }\n\n    html += beforeTrack || '';\n\n    if ( arrows ) {\n      html += this.renderArrows();\n    }\n\n    html += `<div class=\"splide__track\">`;\n    html += `<${ listTag } class=\"splide__list\">`;\n\n    html += this.renderSlides();\n\n    html += `</${ listTag }>`;\n    html += `</div>`; // .track\n\n    html += afterTrack || '';\n\n    if ( slider ) {\n      html += `</div>`;\n      html += afterSlider || '';\n    }\n\n    html += `</div>`; // .splide\n\n    return html;\n  }\n}\n","/**\n * Pads the number with 0.\n *\n * @param number - A number to pad.\n *\n * @return string - Padded number.\n */\nexport function pad( number: number ): string {\n  return number < 10 ? `0${ number }` : `${ number }`;\n}\n","import { slice } from '../../arrayLike';\n\n\n/**\n * Returns elements that match the provided selector.\n *\n * @param parent   - A parent element to start searching from.\n * @param selector - A selector to query.\n *\n * @return An array with matched elements.\n */\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector?: string ): E[] {\n  return selector ? slice<E>( parent.querySelectorAll( selector ) ) : [];\n}\n","/**\n * The type for the regular slider.\n *\n * @since 3.0.0\n */\nexport const SLIDE = 'slide';\n\n/**\n * The type for the carousel slider.\n *\n * @since 3.0.0\n */\nexport const LOOP = 'loop';\n\n/**\n * The type for the fade slider that can not have multiple slides in a page.\n *\n * @since 3.0.0\n */\nexport const FADE = 'fade';\n"],"names":["RTL","TTB","ORIENTATION_MAP","width","left","right","x","X","Y","ArrowLeft","ARROW","ArrowRight","Direction","Splide","Components","options","resolve","prop","axisOnly","direction","index","replace","match","offset","replacement","toLowerCase","charAt","toUpperCase","slice","orient","value","PROJECT_CODE","CLASS_PREFIX","CLASS_ROOT","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_ARROW","CLASS_PAGINATION","CLASS_ACTIVE","STATUS_CLASS_PREFIX","DEFAULTS","type","role","speed","perPage","cloneStatus","arrows","pagination","paginationKeyboard","interval","pauseOnHover","pauseOnFocus","resetProgress","easing","drag","trimSpace","focusableNodes","live","classes","slide","clone","arrow","prev","next","page","spinner","i18n","first","last","slideX","pageX","play","pause","carousel","select","slideLabel","reducedMotion","rewindSpeed","autoplay","arrayLike","start","end","Array","prototype","call","apply","func","bind","concat","arguments","typeOf","subject","isObject","isArray","isString","toArray","forEach","values","iteratee","push","array","items","matches","elm","selector","ownerDocument","defaultView","window","HTMLElement","e","child","parent","children","filter","firstElementChild","ownKeys","Object","keys","forOwn","object","reverse","key","assign","source","merge","remove","nodes","node","parentNode","removeChild","unit","assert","condition","message","Error","Math","min","max","floor","ceil","abs","camelToKebab","string","ids","EventBinder","listeners","forEachEvent","targets","events","target","split","eventNS","fragment","callback","event","namespace","isEventTarget","remover","removeEventListener","addEventListener","unbind","listener","dispatch","detail","CustomEvent","bubbles","document","createEvent","initCustomEvent","dispatchEvent","destroy","data","length","EventInterface","bus","createDocumentFragment","binder","on","join","off","emit","RENDERER_DEFAULT_CONFIG","listTag","slideTag","Style","id","this","styles","_proto","rule","breakpoint","selectors","build","_this","css","default","buildSelectors","sort","n","m","mediaQuery","_this2","trim","SplideRenderer","contents","config","defaults","slides","breakpoints","prefix","number","init","clean","splide","root","clones","querySelectorAll","_proto2","parseBreakpoints","initSlides","registerRootStyles","registerTrackStyles","registerSlideStyles","registerListStyles","_this3","map","content","html","attrs","cover","class","style","buildStyles","isLoop","generateClones","_this4","_ref","_this5","_ref2","cssPadding","cssTrackHeight","_this6","_ref3","buildTranslate","cssSlideHeight","cssAspectRatio","_this7","_ref4","cssSlideWidth","gap","_this$Direction","cssOffsetClones","cssOffsetGaps","isCenter","buildCssValue","cssOffsetCenter","Boolean","_this$Direction2","cloneCount","getCloneCount","isFixedWidth","_this$parseCssValue","parseCssValue","_this$Direction3","_this$parseCssValue2","_this$parseCssValue3","_this$parseCssValue4","padding","height","isVertical","cssHeight","autoWidth","fixedWidth","cssSlideSize","fixedHeight","autoHeight","heightRatio","parseFloat","_this8","focus","buildClasses","isNavigation","hidden","buildAttrs","attr","renderSlides","_this9","tag","_content$html","lazyLoad","src","background","count","unshift","_ref5","flickMaxPages","renderArrows","renderArrow","_this$options","ariaLabel","arrowPath","_this$config","rootClass","beforeTrack","afterTrack","slider","beforeSlider","afterSlider"],"mappings":"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"}